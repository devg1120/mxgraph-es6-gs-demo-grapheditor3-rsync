session remote sync

mxUndoableEdit
    .add(change) -----------change----------> mxGraphModel
                                                  .execute(change)


------------------------------------ double editor

--style/grapheditor.css
#container1 {
        position: relative;
        height: 50vh;
        width:100%;
}

#container2 {
        position: relative;
        height: 50vh;
        width:100%;

}



--index.html
<body>
<div id="container1" class="geEditor"></div>
<div id="container2" class="geEditor"></div>


--index.js
      // Main
      let container1 = document.getElementById("container1");
      let container2 = document.getElementById("container2");
      new EditorUi(new Editor(urlParams["chrome"] == "0", themes), container1);
      new EditorUi(new Editor(urlParams["chrome"] == "0", themes), container2);

------------------------------------ single editor
index.html
<body class="geEditor">
</body>

index.js
      // Main
      new EditorUi(new Editor(urlParams["chrome"] == "0", themes));

-------------------------------------
$ grep -rn  "change.execute()" .
./view/mxGraphView.js:80:      change.execute();
./view/mxGraphSelectionModel.js:137:      change.execute();
./util/mxUndoableEdit.js:99:          change.execute();
./util/mxUndoableEdit.js:126:          change.execute();
./model/mxGraphModel.js:719:    change.execute();             ### exec

--------------------------------------------------------------------
mxgraph-es6-gs/src/model/mxGraphModel.js:719:    change.execute();

 execute(change) {
    change.execute();              <=***  exec
    this.beginUpdate();
    this.currentEdit.add(change);     <=** history
    this.fireEvent(new mxEventObject(mxEvent.EXECUTE, "change", change)); 
    this.fireEvent(new mxEventObject(mxEvent.EXECUTED, "change", change));
    this.endUpdate();
  }


--------------------------------------------------------------------
mxgraph-es6-gs/src/util/mxUndoableEdit.js
  add(change) {
          //console.log("change:", typeof change);    
          if ( change.constructor == mxChildChange ) {
               console.log( "-- mxChildChange");
          } else if ( change.constructor == mxRootChange ) {
               console.log( "-- mxRootChange");
          } else if ( change.constructor == mxGeometryChange ) {

          } else if ( change.constructor == mxSelectionChange ) {
               console.log( "-- mxSelectionChange");
          } else if ( change.constructor == mxCurrentRootChange ) {
               console.log( "-- mxCurrentRootChange");
          } else {
               console.log("change:", change.constructor);
               alert(`unknown change:${change.constructor}`);
          }
    this.changes.push(change);
  }


-------------------------
@mxgraph  alias 導入

./mxgraph-es6-gs 同期開発環境

--vite

xport default defineConfig({
  root: 'src/grapheditor',
  resolve: {
    alias: {
      '@mxgraph': resolve(__dirname, './mxgraph-es6-gs/src')    // local-pkg
      //'@mxgraph':  'mxgraph-es6-gs'                               // git node_modules
    }
  },
})




--depend--
   local mxgraph-es6-gs


--vite--
export default  {
  root: 'src/grapheditor'
}

import { resolve } from 'path'


export default defineConfig({
  resolve: {
    alias: {
      '@mxgraph': resolve(__dirname, './mxgraph-es6-gs/src')       
    }
  },
})



-----------------------------  dev
npm run dev

open http://127.0.0.1:3000

----------------------------- preview
npm run build

cd src/grapheditor
./_dist_set.sh

cd ../..

npm run preview

open http://127.0.0.1:4173

----------------------------- prod
npm run build

cd src/grapheditor
./_dist_set.sh
./_start_httpd.sh

open http://127.0.0.1:3000

